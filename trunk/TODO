OK, I've separated the sidecon tables from the event boxes that actually activate them.

This allows for generic menus.

This also breaks a lot of other things. ^_^; However, it should also allow for a significant speedup of window resize, adding these separated event boxes to an array
will a allow for a simple heightChange function to redistribute them on a table.



--

Ron <Rds> mentioned that Rox will be moving for ~/Choices to ~/.choices - should probably support that, or check both locations.

--


   limit DaMenu expansion. (preserve window width for long paths)
   Hung up on the fact that new width is calculated *after*
   The signal is complete, need a way to move up size calculation,
   preferably without displaying on screen. There's an enum for
   Immediate redraw. Use it on the toolbar?
   
   "If you want to force an area of a window to be redrawn,
   use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
   To cause the redraw to be done immediately, follow that call with
   a call to gdk_window_process_updates()."
   
   --! Actually, it seems that the way this might be done is in
       the on_configure_event, which  has immediate sizes. 

How would you determine if an toolbox overflow menu is displayed? (not just available, but currently in use)

A: There are ways to do it with get_allocation(), but the redraw point needs to be somehow moved up. 

--

   
   
   Generic detail view (Name, Size, Permissions, etc.) should be easy now with gnome_vfsmm; however, sorting them by this info is a bit more of a challenge. A ListView would probably be much better for this.






-----------------------------------------------
version 0.0.7 and onwards
-----------------------------------------------


mime-type dependant icons, a la ROX.

---

@commit 11 -- With the ROX / Gnome-vfsmm work done, most of Ron's <Rds> code is gone. This would include the AppDir test. However, appdirs would never end up showing up in the main window, so this is not a huge loss as of yet. His test was for AppRun within the directory - it would require testing for that file's existance, then notifying that it is an executable and needs a unique icon.

---

   Icon Context menus that do somthing mopre than open

---

 standard tree navigation
Gdk::VISIBILITY_NOTIFY_MASK has somthing to do with progressive menu building.

---

all the folder context menus...

---


--version 0.1.0

public release ^_^;

--version 0.1.0++

File search?




*/
